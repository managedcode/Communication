using System;
using System.Collections.Generic;
using System.Runtime.ExceptionServices;
using System.Text.Json.Serialization;

namespace ManagedCode.Communication;


/// <summary>
/// A machine-readable format for specifying errors in HTTP API responses based on <see href="https://tools.ietf.org/html/rfc7807"/>.
/// </summary>
public class Problem
{
    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    /// dereferenced, it provide human-readable documentation for the problem type
    /// (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be
    /// "about:blank".
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-5)]
    [JsonPropertyName("type")]
    public string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
    /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
    /// see[RFC7231], Section 3.4).
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-4)]
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-3)]
    [JsonPropertyName("status")]
    public int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-2)]
    [JsonPropertyName("detail")]
    public string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyOrder(-1)]
    [JsonPropertyName("instance")]
    public string? Instance { get; set; }

    /// <summary>
    /// Gets the <see cref="IDictionary{TKey, TValue}"/> for extension members.
    /// <para>
    /// Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
    /// other members of a problem type.
    /// </para>
    /// </summary>
    /// <remarks>
    /// The round-tripping behavior for <see cref="Extensions"/> is determined by the implementation of the Input \ Output formatters.
    /// In particular, complex types or collection types may not round-trip to the original type when using the built-in JSON or XML formatters.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, object?> Extensions { get; set; } = new Dictionary<string, object?>(StringComparer.Ordinal);
}



public struct Error
{
    internal Error(string message, string? errorCode = default)
    {
        Message = message;
        ErrorCode = errorCode;
    }

    internal Error(Exception? exception, string? errorCode = default)
    {
        ExceptionObject = exception;
        ErrorCode = errorCode;

        Message = exception?.Message ?? string.Empty;
    }

    internal Error(Exception? exception, string message, string? errorCode = default)
    {
        ExceptionObject = exception;
        ErrorCode = errorCode;
        Message = message;
    }

    public string? ErrorCode { get; set; }
    public string Message { get; set; }

    public Exception? Exception()
    {
        if (ExceptionObject is Exception exception)
            return exception;

        return ExceptionObject as Exception;
    }

    public ExceptionDispatchInfo? ExceptionInfo()
    {
        if (ExceptionObject is Exception exception)
        {
            return ExceptionDispatchInfo.Capture(exception);
        }

        return null;
    }

    public T? Exception<T>() where T : class
    {
        if (ExceptionObject is T exception)
            return exception;

        return ExceptionObject as T;
    }
    
    public object? ExceptionObject { get; set; }

    public TEnum? ErrorCodeAs<TEnum>() where TEnum : Enum
    {
        if (ErrorCode is null)
            return default;

        return (TEnum)Enum.Parse(typeof(TEnum), ErrorCode);
    }

    public bool IsErrorCode(Enum value)
    {
        return Enum.GetName(value.GetType(), value) == ErrorCode;
    }

    public bool IsNotErrorCode(Enum value)
    {
        return Enum.GetName(value.GetType(), value) != ErrorCode;
    }

    public bool Equals(Error other)
    {
        var exceptionMessage = Exception()?.Message;
        var otherExceptionMessage = other.Exception()?.Message;
        return Message == other.Message && ErrorCode == other.ErrorCode && exceptionMessage == otherExceptionMessage;
    }

    public override bool Equals(object? obj)
    {
        return obj is Error other && Equals(other);
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(Message, ErrorCode);
    }

    public static Error FromException(Exception? exception, string? errorCode = default)
    {
        return new Error(exception, errorCode);
    }

    public static bool operator ==(Error? error, Enum errorCode)
    {
        if (error.HasValue)
            return error.Value.ErrorCode == Enum.GetName(errorCode.GetType(), errorCode);

        return false;
    }

    public static bool operator !=(Error? error, Enum errorCode)
    {
        if (error.HasValue)
            return error.Value.ErrorCode == Enum.GetName(errorCode.GetType(), errorCode);

        return true;
    }

    public static bool operator ==(Enum errorCode, Error? error)
    {
        if (error.HasValue)
            return error.Value.ErrorCode == Enum.GetName(errorCode.GetType(), errorCode);

        return false;
    }

    public static bool operator !=(Enum errorCode, Error? error)
    {
        if (error.HasValue)
            return error.Value.ErrorCode == Enum.GetName(errorCode.GetType(), errorCode);

        return true;
    }

    public static Error Create(string message)
    {
        return new Error(message);
    }

    public static Error Create<TEnum>(TEnum errorCode) where TEnum : Enum
    {
        return new Error(string.Empty, Enum.GetName(typeof(TEnum), errorCode));
    }

    public static Error Create<TEnum>(string message, TEnum errorCode) where TEnum : Enum
    {
        return new Error(message, Enum.GetName(typeof(TEnum), errorCode));
    }

    public static Error Create<TEnum>(Exception? exception) where TEnum : Enum
    {
        return new Error(exception, string.Empty);
    }

    public static Error Create<TEnum>(Exception? exception, TEnum errorCode) where TEnum : Enum
    {
        return new Error(exception, Enum.GetName(typeof(TEnum), errorCode));
    }

    public static Error Create<TEnum>(string message, Exception exception, TEnum errorCode) where TEnum : Enum
    {
        return new Error(exception, message, Enum.GetName(typeof(TEnum), errorCode));
    }
}